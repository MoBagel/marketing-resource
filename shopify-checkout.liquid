<script>
(function () {
    var gtmCode = ''; // update your GTM code. If you have already initialized GTM. You can ignore it.

    var cookieExpireDay = 1;
    // set cookie function
    function setCookie(cname, cvalue, exdays) {
        var d = new Date(); // expire unit * days
        d.setTime(d.getTime() + ((exdays || cookieExpireDay) * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
    }

    // read cookie function
    function getCookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }

    // remove cookie function
    function eraseCookie(name) {
        document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    }

    // search parameters
    function getURLParams(name, url) {
        if (!url) {
            url = window.location.href;
        }
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results)
            return null;
        if (!results[2])
            return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    };

    /**********************
    * DYNAMIC DEPENDENCIES
    ***********************/

    /**********************
    * Begin dataLayer Build 
    ***********************/
    window.dataLayer = window.dataLayer || []; // init data layer if doesn't already exist
    var template = "{{template}}";
    /**
    * Landing Page Cookie
    * 1. Detect if user just landed on the site
    * 2. Only fires if Page Title matches website */
    var getCookieLandingPage = getCookie('landingPage');
    if (getCookieLandingPage === undefined || getCookieLandingPage.length === 0) {
        var landingPage = true;
        setCookie('landingPage', 'landed')
    } else {
        var landingPage = false;
        eraseCookie('landingPage');
        setCookie('landingPage', 'refresh');
    }

    /** 
    * Log State Cookie */
    {% if customer %}
    var isLoggedIn = true;
    {% else %}
    var isLoggedIn = false;
    {% endif %}

    // set logState to check user login status
    if (!isLoggedIn) {
        eraseCookie('logState');
        setCookie('logState', 'loggedOut');
    } else {
        var getCookieLogState = getCookie('logState');
        if (getCookieLogState === 'loggedOut' || getCookieLogState === undefined) {
            eraseCookie('logState');
            setCookie('logState', 'firstLog');
        } else if (getCookieLogState === 'firstLog') {
            eraseCookie('logState');
            setCookie('logState', 'refresh');
        }
    }

    if (getCookie('logState') === 'firstLog') {
        var firstLog = true;
    } else {
        var firstLog = false;
    }

    /**********************
    * DATALAYER SECTIONS 
    ***********************/
    /** 
    * DATALAYER: Log State
    * 1. Determine if user is logged in or not.
    * 2. Return User specific data. */
    var logState = {
        {% if shop.customer_accounts_enabled %}
        {% if customer %}
        'userId'        : {{customer.id | json}},
        'customerEmail' : {{customer.email | json}},
        'logState'      : "Logged In",
        'customerInfo'  : {
            'firstName'   : {{customer_address.first_name | json}},
            'lastName'    : {{customer_address.last_name | json}},
            'address1'    : {{customer_address.address1 | json}},
            'address2'    : {{customer_address.address2 | json}},
            'street'      : {{customer_address.street | json}},
            'city'        : {{customer_address.city | json}},
            'province'    : {{customer_address.province | json}},
            'zip'         : {{customer_address.zip | json}},
            'country'     : {{customer_address.country | json}},
            'phone'       : {{customer_address.phone | json}},
            'totalOrders' : {{customer.orders_count | json}},
            'totalSpent'  : {{customer.total_spent | money_without_currency | remove: "," | json}}
        },
        {% else %}
        'logState' : "Logged Out",
        {% endif %}
        {% endif %}
        'firstLog'      : firstLog,
        'customerEmail' : {{customer.email | json}},
        'timestamp'     : Date().replace(/\(.*?\)/g,''),  
        {% if customer.orders_count > 2 %}
        'customerType'       : 'Returning',
        'customerTypeNumber' : '0',
        {% else %}
        'customerType'       : 'New',
        'customerTypeNumber' :'1', 
        {% endif %}
        'shippingInfo' : {
            'fullName'  : {{checkout.shipping_address.name | json}},
            'firstName' : {{checkout.shipping_address.first_name | json}},
            'lastName'  : {{checkout.shipping_address.last_name | json}},
            'address1'  : {{checkout.shipping_address.address1 | json}},
            'address2'  : {{checkout.shipping_address.address2 | json}},
            'street'    : {{checkout.shipping_address.street | json}},
            'city'      : {{checkout.shipping_address.city | json}},
            'province'  : {{checkout.shipping_address.province | json}},
            'zip'       : {{checkout.shipping_address.zip | json}},
            'country'   : {{checkout.shipping_address.country | json}},
            'phone'     : {{checkout.shipping_address.phone | json}},
        },
        'billingInfo' : {
            'fullName'  : {{checkout.billing_address.name | json}},
            'firstName' : {{checkout.billing_address.first_name | json}},
            'lastName'  : {{checkout.billing_address.last_name | json}},
            'address1'  : {{checkout.billing_address.address1 | json}},
            'address2'  : {{checkout.billing_address.address2 | json}},
            'street'    : {{checkout.billing_address.street | json}},
            'city'      : {{checkout.billing_address.city | json}},
            'province'  : {{checkout.billing_address.province | json}},
            'zip'       : {{checkout.billing_address.zip | json}},
            'country'   : {{checkout.billing_address.country | json}},
            'phone'     : {{checkout.billing_address.phone | json}},
        },
        'checkoutEmail' : {{checkout.email | json}},
        'currency'      : {{shop.currency | json}},
        'pageType'      : 'Log State',
        'event'         : 'logState'
    }
  dataLayer.push(logState);
  
  // Shopify variable should wait to get on event loop macroTask
  setTimeout(function(){
      /** DATALAYER: Checkout on Shopify Plus **/
      if(Shopify.Checkout){
          var ecommerce = {
              'transaction_id': '{{checkout.order_number  | json}}',
              'affiliation': {{shop.name | json}},
              'value': {{checkout.total_price | money_without_currency | replace: ',', '.' | json}},
              'tax': {{checkout.tax_price | money_without_currency | replace: ',','.' | json}},
              'shipping': {{checkout.shipping_price | money_without_currency | replace: ',','.' | json}},
              'subtotal': {{checkout.subtotal_price | money_without_currency| replace: ',','.' | json}},
              'currency': {{checkout.currency | json}},
              {% for discount in checkout.discounts %}
              'coupon': {{discount.code | json}},
              'discount'  : {{discount.amount | money_without_currency | json}},
              {% endfor %}
              'email': {{checkout.email | json}},
              'items':[{% for line_item in checkout.line_items %}{
                  'item_id'        : {{line_item.product.id | json}},                  
                  'item_variant'    : {{line_item.variant.title | json}},             
                  'item_name'      : {{line_item.product.title | json}},
                  'price'           : {{line_item.product.price | money_without_currency | replace: ',', '.' | json}},
                  'item_brand'      : {{line_item.product.vendor | json}},
                  'item_category'   : {{line_item.product.type | json}},
                  'item_list_name'  : {{line_item.collection.title | json}},
                  'quantity'        : {{line_item.quantity | json}},
                  'discount'        : {{discount.code | json}}
                  },{% endfor %}],
              };
          if(Shopify.Checkout.step){ 
              if(Shopify.Checkout.step.length > 0){
                  if (Shopify.Checkout.step === 'contact_information'){
                      dataLayer.push({
                          'event'    :'begin_checkout',
                          'pageType' :'Customer Information',
                          'step': 1,
                          ecommerce
                      });
                  }else if (Shopify.Checkout.step === 'shipping_method'){
                      dataLayer.push({
                          'event'    :'add_shipping_info',
                          'pageType' :'Shipping Information',
                          ecommerce
                      });
                  }else if( Shopify.Checkout.step === "payment_method" ){
                      dataLayer.push({
                          'event'    :'add_payment_info',
                          'pageType' :'Add Payment Info',
                          ecommerce
                      });
                  }
              }
                          
              /** DATALAYER: Transaction */
              if(Shopify.Checkout.page == "checkout_one_thank_you"){
                  dataLayer.push({
                  'pageType' :'Transaction',
                  'event'    :'purchase',
                  ecommerce
                  });
              }               
          }
      }
  }, 0)

  if (gtmCode) {
    /** Google Tag Manager **/
    (function (w, d, s, l, i) {
      w[l] = w[l] || [];
      w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' });
      var f = d.getElementsByTagName(s)[0],
        j = d.createElement(s),
        dl = l != 'dataLayer'
          ? '&l=' + l
          : '';
      j.async = true;
      j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl;
      f.parentNode.insertBefore(j, f);
    })(window, document, 'script', 'dataLayer', gtmCode);
  }
})();
</script>